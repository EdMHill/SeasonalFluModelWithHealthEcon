%Purpose:
%Plot weighted kernel density estimate of posterior parameter distributions
%obtained using ABC inference schemes
%--------------------------------------------------------------------------

function PostDistWeightedDensityEstimate(PosteriorParams,ParamWeights,ParamPriorBounds,...
                                        x_label,SynthDataVar,...
                                        SubPlotRowNum,SubPlotColNum,...
                                        FigSizeWidthScale,FigSizeHeightScale,...
                                        SaveFileName)
%Inputs:
%   PosteriorParams - (array, float) Particle sets generated by inference procedure
%   ParamWeights - (vector, float) Weights associated with each parameter/particle set
%   ParamPriorBounds - (array, float) Specify lower (column one) and upper
%                       (column two) bounds per parameter. Used as support
%                       for density estimation.
%   x_label - (string) Parameter labels
%   SynthDataVar - (cell) Two tuple cell.
%       -> First entry: Flag variable. 1 if true parameter values know. 0 otherwise
%       -> Second entry: Vector of true parameter values
%   SubPlotNumRow, SubPlotColNum - (Integers) Specify partitioning of subplot grid
%   FigSizeWidthScale,FigSizeHeightScale - (floats) Specify scaling of figure size
%   SaveFileName - (string) Specify location to save plots


%Unpack SynthDataVar
SynthDataFlag = SynthDataVar{1};
ParamTrueVal = SynthDataVar{2};

%Set up figure
figure('Color',[1 1 1]);
clf
position = [10, 10, FigSizeWidthScale*550, FigSizeHeightScale*450];
set(0, 'DefaultFigurePosition', position);

%Obtain number of Params from input data
ParamNum = numel(x_label);

for ii = 1:ParamNum
    subplot(SubPlotRowNum,SubPlotColNum,ii)
    hold on

    %Construct weighted density estimate
    %Returns estimated density values (EstPostDist) at points xi
    [EstPostDist,xi] = ksdensity(PosteriorParams(:,ii),'Weights',ParamWeights,...
                                  'Support',ParamPriorBounds(ii,:));
    h = plot(xi,EstPostDist,'LineWidth', 1.5,'DisplayName','Posterior');

    %Plot median line
    MedianVal = weightedMedian(PosteriorParams(:,ii),ParamWeights)
    LineHeight = max(EstPostDist)*2;
    p2 = plot([MedianVal MedianVal],[0 LineHeight],'Color',[0.8 0 0],'LineStyle','-','LineWidth', 1.5,'DisplayName','Median');

    if SynthDataFlag == 1
        %Plot "true" value line
        p3 = plot([ParamTrueVal(ii) ParamTrueVal(ii)],[0 LineHeight],'Color',[0 0 0],'LineWidth',1.5,'DisplayName','True');
    end

    %Set subplot properties
    set(gca,'Fontsize',14,'LineWidth',1);
    xlabel(x_label(ii))
    if mod(ii,4) == 1
        ylabel('Relative probability')
    end

    %Set axes limits
    ylim([0 max(EstPostDist)*1.05])
    xlim([min(xi)*0.98 max(xi)*1.02])
    box on

    %Add legend
    if ii == SubPlotColNum
        if SynthDataFlag == 1
            leg1 = legend([h,p2,p3]);
        else
            leg1 = legend([h,p2]);
        end
    end
end

%%
%--------------------------------------------------------------------------
%%% SAVE FIGURE TO FILE
%--------------------------------------------------------------------------
export_fig(SaveFileName,'-pdf','-transparent','-r1200')
end
