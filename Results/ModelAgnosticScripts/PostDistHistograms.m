%Purpose:
%Plot histograms of posterior parameter distributions
%--------------------------------------------------------------------------

function PostDistHistograms(PosteriorParams,x_label,SynthDataVar,PriorDataVar,...
                                        SubPlotRowNum,SubPlotColNum,...
                                            FigSizeWidthScale,FigSizeHeightScale,...
                                            PlotPanelsUsed,...
                                            MedianFlag,NormOption,SaveFileName)
%Inputs:
%   PosteriorParams - (array, float) Particle sets generated by inference procedure
%   x_label - (string) Parameter labels
%   SynthDataVar - (cell) Two tuple cell.
%       -> First entry: Flag variable. 1 if true parameter values know. 0 otherwise
%       -> Second entry: Vector of true parameter values
%   PriorDataVar - (cell) Two tuple cell.
%       -> First entry: Flag variable. 1 if want to plot prior distribution. 0 otherwise
%       -> Second entry: Vector of prior distribution values (x & f(x))
%   SubPlotNumRow, SubPlotColNum - (Integers) Specify partitioning of subplot grid
%   FigSizeWidthScale,FigSizeHeightScale - (floats) Specify scaling of figure size
%   PlotPanelsUsed - (vector, integers) Specify the panels within the
%                                           subplot that will be populated
%   MedianFlag - (Binary flag)  1 if want to plot median. 0 otherwise.
%   NormOption - (scalar) histogram normalisation option
%   SaveFileName - (string) Specify location to save plots

%Unpack SynthDataVar
SynthDataFlag = SynthDataVar{1};
ParamTrueVal = SynthDataVar{2};

%Unpack PriorDataVar
PriorDataFlag = PriorDataVar{1};
PriorPdfSampleVals = PriorDataVar{2};
PriorPdfVals = PriorDataVar{3};

%Set up figure
figure('Color',[1 1 1]);
clf
position = [10, 10, FigSizeWidthScale*550, FigSizeHeightScale*450];
set(0, 'DefaultFigurePosition', position);
hold on

%Obtain number of Params from input data
ParamNum = numel(x_label);

for ii = 1:ParamNum
    PanelID = PlotPanelsUsed(ii);
    subplot(SubPlotRowNum,SubPlotColNum,PanelID)

    if NormOption == 1
        %Construct histogram of pdf
        h_temp = histogram(PosteriorParams(:,ii),50,'Normalization','pdf');

        %Get maximum density value
        MaxBarHeight = max(h_temp.Values);

        %Scale so maximum value is 1
        ParamRange = max(PosteriorParams(:,ii)) - min(PosteriorParams(:,ii)); %Set bandwidth based on range of values for parameter ii
        BandwidthVal = max(1e-10,ParamRange/10); %Fore bacnwidth value to be non-zero!
        [ScaledDensityVals,ScaledDensity_EvalPts] = ksdensity(PosteriorParams(:,ii),'Bandwidth',BandwidthVal); %Bandwidth is 10% of the range of parameter values

        h = plot(ScaledDensity_EvalPts,ScaledDensityVals/max(ScaledDensityVals),'Color',[0.5 0.5 0.5],'LineStyle','-','LineWidth',1.5,'DisplayName','Posterior');

        %Shade area beneath curve
        area(ScaledDensity_EvalPts,ScaledDensityVals/max(ScaledDensityVals))

        %Set maximum plot height
        MaxYVal = 1.05;
    else
        %Construct histogram, plot of relative probability
        h = histogram(PosteriorParams(:,ii),20,'Normalization','probability','DisplayName','Posterior',...
                        'FaceAlpha',1);

        %Get maximum bar height of histogram
        MaxBarHeight = max(h.Values);
        MaxYVal = MaxBarHeight*1.05;
    end


    %     %Plot modal value
    %     [~,ModalIdx] = max(h.Values);
    %     ModalVal = mean(h.BinEdges(ModalIdx:ModalIdx+1));
    %     %p1 = plot([ModalVal ModalVal],[0 MaxYVal],'Color',[0.5 0.5 0.5],'LineStyle','--','LineWidth', 1.5,'DisplayName','Mode');
    %

    %Plot median line
    if MedianFlag == 1
        MedianVal = median(PosteriorParams(:,ii));
        p2 = plot([MedianVal MedianVal],[0 MaxYVal],'Color',[0.8 0 0],'LineStyle','-','LineWidth', 1.5,'DisplayName','Median');
    end

    %Plot "true" value line
    if SynthDataFlag == 1
        p3 = plot([ParamTrueVal(ii) ParamTrueVal(ii)],[0 MaxYVal],'Color',[0 0 0],'LineWidth',1.5,'DisplayName','True');
    end

    %Plot prior distribution scaled density
    if PriorDataFlag == 1 && NormOption == 1
        p4 = plot(PriorPdfSampleVals(ii,:),PriorPdfVals(ii,:)/max(PriorPdfVals(ii,:)),'Color',[0 0.8 0],'LineStyle','-.','LineWidth',1.5,'DisplayName','Prior');
    end

    %Set subplot properties
    set(gca,'Fontsize',16,'LineWidth',1);

    %Set axes labels
    xlabel(x_label(ii),'Interpreter', 'LaTeX','FontSize',20)
    if mod(PanelID,SubPlotColNum) == 1
        if NormOption == 1
            ylabel('Scaled density','Fontsize',16);
        else
            ylabel('Proportion','Fontsize',16);
        end
    end

    %Set y-axis limits
    ylim([0 MaxYVal])

%     %Set x-axis limits for transmissibility params
%     if ii < 5
%        xlim([0.379 0.441])
%     elseif ii >7
%         xlim([0.9e-3 4.1e-3])
%     end


    %Set x-axis limits (if want to plot prior distribution)
    if PriorDataFlag == 1 %&& NormOption == 1
        XRange = max(PriorPdfSampleVals(ii,:)) - min(PriorPdfSampleVals(ii,:));
        XLimAppend = XRange./100; %Add 1% of range to LB and UB
        xlim([min(PriorPdfSampleVals(ii,:))-XLimAppend max(PriorPdfSampleVals(ii,:))+XLimAppend]);
    end
    box on

    %Add legend
    if ii == SubPlotColNum

        if MedianFlag == 1 %Median is included on plot
            if SynthDataFlag == 1 && PriorDataFlag == 1 && NormOption == 1
                %Add "true" value line and prior distribution
                %leg1 = legend([h,p1,p2,p3,p4]);
                leg1 = legend([h,p2,p3,p4],'Fontsize',16);
            elseif SynthDataFlag == 1 %"True" value, no prior
                %leg1 = legend([h,p1,p2,p3]);
                leg1 = legend([h,p2,p3],'Fontsize',16);
            elseif PriorDataFlag == 1 && NormOption == 1 %Add prior distribution
                %leg1 = legend([h,p1,p2,p4]);
                leg1 = legend([h,p2,p4],'Fontsize',16);
            else %No "true" value or prior
                %leg1 = legend([h,p1,p2]);
                leg1 = legend([h,p2],'Fontsize',16);
            end
        else
            if SynthDataFlag == 1 && PriorDataFlag == 1 && NormOption == 1
                %Add "true" value line and prior distribution
                leg1 = legend([h,p3,p4],'Fontsize',16);
            elseif SynthDataFlag == 1 %"True" value, no prior
                leg1 = legend([h,p3],'Fontsize',16);
            elseif PriorDataFlag == 1 && NormOption == 1 %Add prior distribution
                %leg1 = legend([h,p1,p2,p4]);
                leg1 = legend([h,p4],'Fontsize',16);
                set(leg1,'Position',[0.671245792281347 0.836497828950774 0.0553535343179797 0.0753291980315534])
            else %No "true" value or prior
                %leg1 = legend([h,p1,p2]);
                %leg1 = legend(h,'Fontsize',16);
                fprintf('No legend plotted');
            end
        end
   end
end

%%
%--------------------------------------------------------------------------
%%% SAVE FIGURE TO FILE
%--------------------------------------------------------------------------
export_fig(SaveFileName,'-pdf','-transparent','-painters','-r1200')
end
