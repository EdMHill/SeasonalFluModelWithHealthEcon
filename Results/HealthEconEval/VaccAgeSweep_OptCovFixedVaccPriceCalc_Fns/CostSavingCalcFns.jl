#Purpose:
#File to store functions used to compute the cost saving generated by each
#low-risk vaccination programme (on top of an at-risk programme)

#Outline:
# Stage 1: Import data & assign to variables
# Stage 2: Get difference in vaccines bought between alternate & ref strategy
# Stage 3: Per strategy, multiply total allowbale vaccine cost by number of vaccines required
# Stage 4: Get quantile of costs relative to threshold value
# Stage 5: Assign quantities to output variable
#-------------------------------------------------------------------------------

function  CostSavingPerStratFn(VaccinesBoughtFile::String,
                                ThresholdPricePerDoseFile::String,
                                QALYSliceIdx::Int64,
                                QuantileVal::Float64)
#Inputs:
# AltVaccStratCoveragesFile, VaccinesBought_File, ThresholdPricePerDoseFile - Data input files
# QALYSliceIdx - Slice of threshold price per dose array to access, corresponding to a particular worth per QALY
#                  Slice 1: 0k, Slice 2: 5k,... , Slice 5: 20k, Slice 7: 30k.
# QuantileVal - Desired percentile to be computed

#Outputs:
# VaccDeployedAndCostSavingByStrat - 2D array. Row per alternate strategy. Column 1 for vaccines deployed. Column 2 for cost saving.

#-------------------------------------------------------------------------------
### STAGE 1: Import data & assign to variables
#-------------------------------------------------------------------------------

#--------------------------------------------------------------------------
### Import vaccines deployed data
#--------------------------------------------------------------------------
VaccinesBought_File = matopen(VaccinesBoughtFile)

#Assign discounted vaccine totals to variables
VaccinesBought_RefStrat = read(VaccinesBought_File,"VaccDeployedPerStrat_RefStrat")
VaccinesBought_AltStrat = read(VaccinesBought_File,"VaccDeployedPerStrat")

#--------------------------------------------------------------------------
### Import threshold vaccine dose price data
#--------------------------------------------------------------------------
ThresholdPricePerDose_File = matopen(ThresholdPricePerDoseFile)

#--------------------------------------------------------------------------
### Assign selected threshold vaccine dose price data to variables
#--------------------------------------------------------------------------
ThresholdPricePerDoseData_ByAltStrat = read(ThresholdPricePerDose_File,"ThresholdPricePerDoseData_ByAltStrat")

ThresholdPricePerDose = ThresholdPricePerDoseData_ByAltStrat[:,QALYSliceIdx,:]

#Get number of alternate strategies being analysed
ReplicateNum = size(ThresholdPricePerDose,1)
AltStratNum = size(ThresholdPricePerDose,2)

#-------------------------------------------------------------------------------
### STAGE 2: Get difference in vaccines bought between alternate & ref strategy
#-------------------------------------------------------------------------------
VaccinesBought_AltVsRefStrat = VaccinesBought_AltStrat .- VaccinesBought_RefStrat

#-------------------------------------------------------------------------------
### STAGE 3: Per strategy, multiply total allowbale vaccine cost by number of vaccines required
#-------------------------------------------------------------------------------

#Total allowable vaccine cost given by threshold dose price + administration charge
AdminCharge = 9 #Fee is £10 per administerd dose. With 10% vaccine wastage becomes £9 on average.
TotalAllowableVaccPrice = AdminCharge .+ ThresholdPricePerDose

#Multiply each column (strategy) by number of additional vaccines needed for carrying out that strategy
OverallCostSavingByReplicate = VaccinesBought_AltVsRefStrat'.*TotalAllowableVaccPrice #Dimension ReplicateNum x AltStratNum

#-------------------------------------------------------------------------------
### STAGE 4: Get quantile of costs relative to threshold value
#-------------------------------------------------------------------------------
CostSavingQuantile = zeros(AltStratNum)
for AltStratItr = 1:AltStratNum
    CostSavingQuantile[AltStratItr] = quantile(OverallCostSavingByReplicate[:,AltStratItr],QuantileVal)
end

#-------------------------------------------------------------------------------
### STAGE 5: Assign quantities to output variable
#-------------------------------------------------------------------------------
VaccDeployedAndCostSavingByStrat = [VaccinesBought_AltVsRefStrat CostSavingQuantile ]

    return VaccDeployedAndCostSavingByStrat
end
